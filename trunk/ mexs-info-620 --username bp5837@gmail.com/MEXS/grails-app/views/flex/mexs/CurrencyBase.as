/**
 * Generated by Gas3 v2.3.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Currency.as).
 */

package mexs {

    import flash.events.EventDispatcher;
    import flash.net.FileReference;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;
    import org.springframework.validation.Errors;

    use namespace meta;

    [Managed]
    public class CurrencyBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _buyingRate:Number;
        private var _countryName:String;
        private var _currencyID:int;
        private var _currencyName:String;
        private var _currencySymbol:String;
        private var _errors:Errors;
        private var _id:Number;
        private var _sellingRate:Number;
        private var _sourceTransactions:ListCollectionView;
        private var _targetTransactions:ListCollectionView;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Currency) || (property as Currency).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
        	_em = em;
        }    	
    
    	public static const meta_hasMany:Object = {
			sourceTransactions: Transaction,
    		targetTransactions: Transaction
		}
    
    	public static const meta_constraints:Array = [
    		{ property: "buyingRate" }, 
    		{ property: "countryName" }, 
    		{ property: "currencyID" }, 
    		{ property: "currencyName" }, 
    		{ property: "currencySymbol" }, 
    		{ property: "sellingRate" }, 
    		{ property: "sourceTransactions",
				association: "oneToMany", bidirectional: "true"
    		}, 
    		{ property: "targetTransactions",
				association: "oneToMany", bidirectional: "true"
    		}
		]

        public function set buyingRate(value:Number):void {
            _buyingRate = value;
        }
        public function get buyingRate():Number {
            return _buyingRate;
        }

        public function set countryName(value:String):void {
            _countryName = value;
        }
        public function get countryName():String {
            return _countryName;
        }

        public function set currencyID(value:int):void {
            _currencyID = value;
        }
        public function get currencyID():int {
            return _currencyID;
        }

        public function set currencyName(value:String):void {
            _currencyName = value;
        }
        public function get currencyName():String {
            return _currencyName;
        }

        public function set currencySymbol(value:String):void {
            _currencySymbol = value;
        }
        public function get currencySymbol():String {
            return _currencySymbol;
        }

        public function set errors(value:org.springframework.validation.Errors):void {
            _errors = value;
        }
        public function get errors():Errors {
            return _errors;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        [Id]
        public function get id():Number {
            return _id;
        }

        public function set sellingRate(value:Number):void {
            _sellingRate = value;
        }
        public function get sellingRate():Number {
            return _sellingRate;
        }

        public function set sourceTransactions(value:mx.collections.ListCollectionView):void {
            _sourceTransactions = value;
        }
        public function get sourceTransactions():ListCollectionView {
            return _sourceTransactions;
        }

        public function set targetTransactions(value:mx.collections.ListCollectionView):void {
            _targetTransactions = value;
        }
        public function get targetTransactions():ListCollectionView {
            return _targetTransactions;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        [Version]
        public function get version():Number {
            return _version;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
            if (isNaN(_id))
                return UIDUtil.createUID();
            return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:CurrencyBase = CurrencyBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               	em.meta_mergeExternal(src._buyingRate, _buyingRate, null, this, 'buyingRate', function setter(o:*):void{_buyingRate = o as Number});
               	em.meta_mergeExternal(src._countryName, _countryName, null, this, 'countryName', function setter(o:*):void{_countryName = o as String});
               	em.meta_mergeExternal(src._currencyID, _currencyID, null, this, 'currencyID', function setter(o:*):void{_currencyID = o as int});
               	em.meta_mergeExternal(src._currencyName, _currencyName, null, this, 'currencyName', function setter(o:*):void{_currencyName = o as String});
               	em.meta_mergeExternal(src._currencySymbol, _currencySymbol, null, this, 'currencySymbol', function setter(o:*):void{_currencySymbol = o as String});
               	em.meta_mergeExternal(src._errors, _errors, null, this, 'errors', function setter(o:*):void{_errors = o as Errors});
               	em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               	em.meta_mergeExternal(src._sellingRate, _sellingRate, null, this, 'sellingRate', function setter(o:*):void{_sellingRate = o as Number});
               	em.meta_mergeExternal(src._sourceTransactions, _sourceTransactions, null, this, 'sourceTransactions', function setter(o:*):void{_sourceTransactions = o as ListCollectionView});
               	em.meta_mergeExternal(src._targetTransactions, _targetTransactions, null, this, 'targetTransactions', function setter(o:*):void{_targetTransactions = o as ListCollectionView});
               	em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _buyingRate = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _countryName = input.readObject() as String;
                _currencyID = input.readObject() as int;
                _currencyName = input.readObject() as String;
                _currencySymbol = input.readObject() as String;
                _errors = input.readObject() as Errors;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _sellingRate = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _sourceTransactions = input.readObject() as ListCollectionView;
                _targetTransactions = input.readObject() as ListCollectionView;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) { 
                output.writeObject((_buyingRate is IPropertyHolder) ? IPropertyHolder(_buyingRate).object : _buyingRate); 
                output.writeObject((_countryName is IPropertyHolder) ? IPropertyHolder(_countryName).object : _countryName); 
                output.writeObject((_currencyID is IPropertyHolder) ? IPropertyHolder(_currencyID).object : _currencyID); 
                output.writeObject((_currencyName is IPropertyHolder) ? IPropertyHolder(_currencyName).object : _currencyName); 
                output.writeObject((_currencySymbol is IPropertyHolder) ? IPropertyHolder(_currencySymbol).object : _currencySymbol); 
                output.writeObject((_errors is IPropertyHolder) ? IPropertyHolder(_errors).object : _errors); 
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id); 
                output.writeObject((_sellingRate is IPropertyHolder) ? IPropertyHolder(_sellingRate).object : _sellingRate); 
                output.writeObject((_sourceTransactions is IPropertyHolder) ? IPropertyHolder(_sourceTransactions).object : _sourceTransactions); 
                output.writeObject((_targetTransactions is IPropertyHolder) ? IPropertyHolder(_targetTransactions).object : _targetTransactions); 
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
