/**
 * Generated by Gas3 v2.3.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Bank.as).
 */

package mexs {

    import flash.events.EventDispatcher;
    import flash.net.FileReference;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.collections.ListCollectionView;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class BankBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _address:String;
        private var _bankID:int;
        private var _id:Number;
        private var _name:String;
        private var _phone:String;
        private var _terminals:ListCollectionView;
        private var _url:String;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Bank) || (property as Bank).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
        	_em = em;
        }    	
    
    	public static const meta_hasMany:Object = {
			terminals: Terminal
		}
    
    	public static const meta_constraints:Array = [
    		{ property: "name" }, 
    		{ property: "address" }, 
    		{ property: "phone" }, 
    		{ property: "url" }, 
    		{ property: "bankID" }, 
    		{ property: "terminals",
				association: "oneToMany", bidirectional: "true"
    		}
		]

        public function set address(value:String):void {
            _address = value;
        }
        public function get address():String {
            return _address;
        }

        public function set bankID(value:int):void {
            _bankID = value;
        }
        public function get bankID():int {
            return _bankID;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        [Id]
        public function get id():Number {
            return _id;
        }

        public function set name(value:String):void {
            _name = value;
        }
        public function get name():String {
            return _name;
        }

        public function set phone(value:String):void {
            _phone = value;
        }
        public function get phone():String {
            return _phone;
        }

        public function set terminals(value:mx.collections.ListCollectionView):void {
            _terminals = value;
        }
        public function get terminals():ListCollectionView {
            return _terminals;
        }

        public function set url(value:String):void {
            _url = value;
        }
        public function get url():String {
            return _url;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        [Version]
        public function get version():Number {
            return _version;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
            if (isNaN(_id))
                return UIDUtil.createUID();
            return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        }

        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:BankBase = BankBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               	em.meta_mergeExternal(src._address, _address, null, this, 'address', function setter(o:*):void{_address = o as String});
               	em.meta_mergeExternal(src._bankID, _bankID, null, this, 'bankID', function setter(o:*):void{_bankID = o as int});
               	em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
               	em.meta_mergeExternal(src._name, _name, null, this, 'name', function setter(o:*):void{_name = o as String});
               	em.meta_mergeExternal(src._phone, _phone, null, this, 'phone', function setter(o:*):void{_phone = o as String});
               	em.meta_mergeExternal(src._terminals, _terminals, null, this, 'terminals', function setter(o:*):void{_terminals = o as ListCollectionView});
               	em.meta_mergeExternal(src._url, _url, null, this, 'url', function setter(o:*):void{_url = o as String});
               	em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _address = input.readObject() as String;
                _bankID = input.readObject() as int;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _name = input.readObject() as String;
                _phone = input.readObject() as String;
                _terminals = input.readObject() as ListCollectionView;
                _url = input.readObject() as String;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) { 
                output.writeObject((_address is IPropertyHolder) ? IPropertyHolder(_address).object : _address); 
                output.writeObject((_bankID is IPropertyHolder) ? IPropertyHolder(_bankID).object : _bankID); 
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id); 
                output.writeObject((_name is IPropertyHolder) ? IPropertyHolder(_name).object : _name); 
                output.writeObject((_phone is IPropertyHolder) ? IPropertyHolder(_phone).object : _phone); 
                output.writeObject((_terminals is IPropertyHolder) ? IPropertyHolder(_terminals).object : _terminals); 
                output.writeObject((_url is IPropertyHolder) ? IPropertyHolder(_url).object : _url); 
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
